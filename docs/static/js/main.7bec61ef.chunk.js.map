{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":";qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OAEI,aADJ,CACI,QAAMC,SAjBW,SAACC,GAElBA,EAAEC,iBAMCJ,EAAWK,OAAOC,QAAU,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEtCN,EAAc,MAMlB,SACI,uBAEIO,KAAK,OAGLC,MAAOT,EAEPU,SA7Ba,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,uzMCNxB,IAAMG,EAAO,uCAAG,WAAMC,GAAN,sFAKbC,EALa,iDAKoCC,UAAWF,GAL/C,+DASKG,MAAMF,GATX,cASbG,EATa,gBAWEA,EAAUC,OAXZ,uBAWZC,EAXY,EAWZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBvB,kBAoBZM,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA4BA,OAnBAC,qBAAW,WAKPvB,EAAQC,GAEPuB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACnB,IAKGoB,EDzBwBK,CAAazB,GAAhCY,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDf,IAClDmB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEb5BgB,EAAe,WAExB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAQA,OACI,qCACI,8CAEA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBACI,6BAIQ0C,EAAWnB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,YCtBrC4B,IAASC,OAGL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7bec61ef.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n \nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');//Dejamos al input como un String vacio\n//'e' es el evento\n//Manejar el valor de entrada\n    const handleInputValue = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n//Para prevenir el comportamiento por defecto del formularios es '.preventDefault();'\n        e.preventDefault();\n        //console.log('Echo!!!!');\n\n/*Hacemos la condicional para que no acepte espacios en blanco (que no escriban nada en el Input) \ndebe de tener al menos dos caracteres\nEl método trim( ) elimina los espacios en blanco en ambos extremos del string*/\n        if(inputValue.trim().length >= 2){\n            setCategories(cats => [inputValue, ...cats]);\n//Esto para que no pueda insertar dos veces la misma propiedad al array\n            setInputValue('');\n        }  \n    }\n\n    return(\n    //Como el 'form' es un elemento que agrupa todo lo demas, no es necesario utilizar un 'fragment' o un 'div'\n        <form onSubmit={handleSubmit}>\n            <input \n                //Es de tipo texto\n                type=\"text\"\n                /*El input value siempre va a ser el ultimo valor actualizado de lo que \n                la persona escibio en el input*/\n                value={inputValue}\n                /*Permite realizar cambios en el imput, osea escribir utilizando el metodo handleInputValue*/\n                onChange={handleInputValue}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","/*Este funcion realiza la peticion HTTP, trae las imagenes, las procesa y podria retornarlas*/ \n//Peticion HTTP con endpoint en JavaScript actual\nexport const getGifs = async(category) => {\n    //Nuestro EndPoint realizado en Postman\n    //Interpolación de String ${} pada poder utilizarlo se necesitan utilizar backtick ```\n    /*encodeURI es de javaScript y se utiliza para tener una correcta peticion, \n    por si categoria tiene espacios y cosas asi*/\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=Bvwf4908FCigtoLydHw6MPnQOC5Pn2FM`;\n/*Fetch es el nombre de una nueva API para Javascript con la cuál podemos realizar \npeticiones HTTP asíncronas utilizando promesas y de forma que el código sea un poco \nmás sencillo y menos verbose.*/  \n    const respuesta = await fetch(url);\n    //Obtenemos la respuesta en formato json\n    const {data} = await respuesta.json();\n    //Solo extraemos de data lo que nos interesa, en este caso seria el id, titulo y url mutando el arreglo que recibimos \n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;//Esta funcion como es async regresa una promesa que resuelve la coleccion de mis imagenes\n    /*nosotros aqui no contamos con el SetImages \n    setImages(gifs);*/\n}","import React from 'react';\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            {/*El atributo alt sirve para poner algun mensaje*/}\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}","//El useEffect permite ejecutar cierto codigo de manera condicional para no ciclar de manera infinita \nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n//Mandamos como argumento la 'category' a nuestro useFetchGifs\n    const {data:images, loading} = useFetchGifs(category);\n//Para renombrar 'data' se utliza la desestructuracion ':' y despues el nombre que le queremos dar\n    return(\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n            <div className='card-grid'>\n                    {\n                        images.map(img => (\n                            <GifGridItem \n                                key={img.id}\n                                {...img}/>\n                        ))\n                    }\n            </div>\n        </> \n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    /*Lo que hace este codigo es que se ejecuta solo cuando el componente \n    es renderizado por primera vez. Asi no vuelve a llamar a nuestra api*/\n    //Arreglo de dependencias '[]'\n//Se hace el efecto para que solo se dispare cuando cambie la categoria\n    useEffect( () => {\n        /*Aqui adentro del efecto ejecutamos el cuerpo de mi peticion HTTP,\n        aqui es donde necesito hacer esa peticion y traer esas imagenes, \n        como retorna una promesa utilizamos then*/\n//Hace la peticion HTTP\n        getGifs(category)\n//Aqui tenemos las imagenes\n        .then(imgs => {\n//Y cuando tenemos la data se llama al setState para cambiarle la informacion\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category])\n    /*Colocamos en el arreglo de dependencias la category \n    debido a que nos sirve por si esta cambia, entonces lo que indicamos \n    es que se vuelva a ejecutar este efecto, esta funcion*/\n    \n    return state; //{ data:[], loading: true};\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    //const categories = ['Dragon Ball', 'Pokemon', 'One Punch'];*/\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    //const handleAdd = () => {\n                        //'...' operador spreed  \n        //setCategories([...categories, 'Samurai X']);\n        //setCategories(cat => [...cat, 'Samurai X']);\n    //}*/ \n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n{/*Gracias a esto podemos mandar como argumento a setCategories de la funcion hacia AddCategorys*/}\n            <AddCategory \n                setCategories={setCategories}\n            />\n            <hr/>\n                <ol>\n                    {\n                    //MAP sirve para transformar cada uno de los elementos que estan dentro del arreglo\n                    //Al igual que este fragmento de codigo nos sirve como un for, puesto que recorre los elementos.\n                        categories.map(category =>( \n                            <GifGrid \n                                key={category}\n                                category={category}\n                            />\n                        ))\n                    }\n                </ol>\n        </>  \n    );      \n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n//Se recomienda eliminar <React.StrictMode>\n  //<React.StrictMode>\n    <GifExpertApp />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}